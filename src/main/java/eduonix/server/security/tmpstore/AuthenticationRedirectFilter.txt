package eduonix.server.security;

import org.apache.amber.oauth2.client.request.OAuthClientRequest;

import org.apache.log4j.Logger;

import org.jasypt.util.text.StrongTextEncryptor;

import org.socraticgrid.server.security.OAuth2Constant;

import org.socraticgrid.server.util.KeyStore;

import org.socraticgrid.shared.util.PortalConstant;

import org.socraticgrid.server.util.PortalProperties;

import javax.servlet.*;

import javax.servlet.http.HttpServletRequest;

import javax.servlet.http.HttpServletResponse;

import javax.servlet.http.HttpSession;

import java.io.IOException;

import java.util.Date;


/**

 * A filter that secures the main html page ProviderPortal.html. The filter redirects to the Wso2 identity server

 login.

 * If the user has valid credentials for the Wso2 login then the wso2 openId server returns to the callback

 servlet

 * 'org.socraticgrid.server.security.OAuth2CallbackServlet'

 */

public class AuthenticationRedirectFilter extends AbstractOauthRequestFilter implements Filter {

    private static Logger log = Logger.getLogger(AuthenticationRedirectFilter.class);

    /**

     * this instance is just a wrapper, can be extended to a secure java Keystore in the filesystem

     * the key secured in the Keystore is for the decryption of the OAuth credentials such as secret and

     OAuth key

     */

    private KeyStore keyStore = new KeyStore();

    /**

     * This method checks if there is a access token in the session. If no access token in

     * the session it redirects to the Wso2 identity server.

     * @param servletRequest standard java filter servletRequest instance

     * @param servletResponse standard java filter servletResponse instance

     * @param filterChain standard java filter filterChain instance

     * @throws IOException

     * @throws ServletException

     */

    @Override

    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain

            filterChain) throws IOException, ServletException {

        HttpServletRequest request = (HttpServletRequest) servletRequest;

        HttpServletResponse response = (HttpServletResponse) servletResponse;

        HttpSession session = request.getSession();

//Get the IP address of client machine.

        String ipAddress = request.getRemoteAddr();

//Log the IP address and current timestamp.

        log.info("AuthenticationRedirectFilter Filtering request from IP " + ipAddress + ", at Time " + new

                Date().toString());

        log.info("AuthenticationRedirectFilter Filtering request from Method " + request.getRequestURI());

        log.info("AuthenticationRedirectFilter Filtering request from Method " + request.getMethod());

/**

 * Try to get an access token from the session, if no token then 'tokenExists' will be null

 */

        String tokenExists = (String)

                session.getAttribute(PortalConstant.SessionVariable.ACCESS_TOKEN.name());

        log.info("AuthenticationRedirectFilter Filtering request and tokenExists = " + tokenExists);

//not caching the portal.html which is tiny to prevent someone from logging out and then going to the

        portal page with the browser's cached portal.html

        response.setHeader("Cache足control", "no足cache, no足store, must足revalidate");

// check if the current user is authorised with a not null access token for this session

        if (tokenExists == null) {

/**

 * This string is needed for the OAuth identity server implementation of the oAuth flow

 * This application only supports one Grant type

 */

            String grantType = OAuth2Constant.OAUTH2_GRANT_TYPE_CODE.getValue();

/**

 * This string is needed for the OAuth identity server implementation of the oAuth flow

 * Scopes are for access to different categories of data. This application only supports one scope.

 */

            String scope = PortalProperties.getProperty(PortalProperties.PROPS.SCOPE);

/**

 * After a successful login at the Wso2 server login the flow redirects to this url

 */

            String callbackurl = PortalProperties.getProperty(PortalProperties.PROPS.CALLBACK_URL);

/**

 * A OAuth credential for this application not user.

 */

            String consumerKey = PortalProperties.getProperty(PortalProperties.PROPS.CONSUMER_KEY);

/**

 * A OAuth property for this application.

 */

            String authzEndpoint = PortalProperties.getProperty(PortalProperties.PROPS.AUTHZ_ENDPOINT);

            String locationURI = null;

            log.info("AuthenticationRedirectFilter debug String " +

                    PortalProperties.getProperty(PortalProperties.PROPS.IS_KEYS_ENCRYPTED));

            log.info("AuthenticationRedirectFilter debug Boolean " +

                    Boolean.parseBoolean(PortalProperties.getProperty(PortalProperties.PROPS.IS_KEYS_ENCRYPTED)));

            try {

                if

                        (Boolean.parseBoolean(PortalProperties.getProperty(PortalProperties.PROPS.IS_KEYS_ENCRYPTED))) {

// this is a Base 64 encrypted string

                    consumerKey = PortalProperties.getProperty(PortalProperties.PROPS.CONSUMER_KEY);

                    StrongTextEncryptor textEncryptor = new StrongTextEncryptor();

// textEncryptor.setPassword(PortalProperties.getProperty(PortalProperties.PROPS.KEY));

                    textEncryptor.setPassword(KeyStore.KEY);

                    consumerKey = textEncryptor.decrypt(consumerKey);

                    log.info("AuthenticationRedirectFilter doFilter decrypt consumerKey: " + consumerKey);

                }

                log.info("AuthenticationRedirectFilter debug String authzEndpoint " + authzEndpoint);

                log.info("AuthenticationRedirectFilter debug String consumerKey " + consumerKey);

                log.info("AuthenticationRedirectFilter debug String callbackurl " + callbackurl);

                log.info("AuthenticationRedirectFilter debug String scope " + scope);

/**

 OAuthClientRequest authzRequest = OAuthClientRequest

 * The Wso2 server api client for authorisation requests.

 */

                .authorizationLocation(authzEndpoint)

                        .setClientId(consumerKey)

                        .setRedirectURI(callbackurl)

                        .setResponseType(grantType)

                        .setScope(scope)

                        .buildQueryMessage();

                locationURI = authzRequest.getLocationUri();

                log.info("AuthenticationRedirectFilter doFilter send redirect for locationURI: " + locationURI);

                response.sendRedirect(locationURI);

//esponse.sendRedirect("http://www.google.com");

                return;

            } catch (Exception e) {

                e.printStackTrace();

                log.error(e.getLocalizedMessage());

            }

        }

        filterChain.doFilter(servletRequest, servletResponse);

    }

    @Override

    public void destroy() {

    }

}
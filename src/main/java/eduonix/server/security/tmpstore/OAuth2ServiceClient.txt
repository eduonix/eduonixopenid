package eduonix.server.security;

import org.apache.axis2.AxisFault;

import org.apache.axis2.client.Options;

import org.apache.axis2.client.ServiceClient;

import org.apache.axis2.transport.http.HTTPConstants;

import org.apache.log4j.Logger;

import org.socraticgrid.server.security.filters.AbstractOauthRequestFilter;

import org.wso2.carbon.identity.oauth2.stub.OAuth2TokenValidationServiceStub;

import org.wso2.carbon.identity.oauth2.stub.dto.OAuth2TokenValidationRequestDTO;

import org.wso2.carbon.identity.oauth2.stub.dto.OAuth2TokenValidationResponseDTO;

import org.wso2.carbon.utils.CarbonUtils;

/**

 * The Wso2 identity server rest client. Used in the callback servlet

 */

public class OAuth2ServiceClient {

    private OAuth2TokenValidationServiceStub stub;

    private static Logger log = Logger.getLogger(OAuth2ServiceClient.class);

    private static final int TIMEOUT_IN_MILLIS = 15 * 60 * 1000;

    /**

     * Instantiates OAuth2TokenValidationService

     * org/apache/commons/httpclient/HttpException

     * @throws org.apache.axis2.AxisFault

     */

    public OAuth2ServiceClient() throws AxisFault {

        "OAuth2TokenValidationService";

        AbstractOauthRequestFilter.password, true, stub._getServiceClient());

        String serviceURL = AbstractOauthRequestFilter.serverUrl +

                stub = new OAuth2TokenValidationServiceStub(null, serviceURL);

        CarbonUtils.setBasicAccessSecurityHeaders(AbstractOauthRequestFilter.userName,

                ServiceClient client = stub._getServiceClient();

        Options options = client.getOptions();

        options.setTimeOutInMilliSeconds(TIMEOUT_IN_MILLIS);

        options.setProperty(HTTPConstants.SO_TIMEOUT, TIMEOUT_IN_MILLIS);

        options.setProperty(HTTPConstants.CONNECTION_TIMEOUT, TIMEOUT_IN_MILLIS);

        options.setCallTransportCleanup(true);

        options.setManageSession(true);

    }

    /**

     *

     * @param params

     * @return

     * @throws Exception

     */

    public OAuth2TokenValidationResponseDTO

    validateAuthenticationRequest(OAuth2TokenValidationRequestDTO params)

            throws Exception {

        OAuth2TokenValidationResponseDTO resp = stub.validate(params);

        log.info("authorizedUser="+resp.getAuthorizedUser());

        log.info("error message="+resp.getErrorMsg());

        log.info("expiry time="+resp.getExpiryTime());

        log.info("scope="+resp.getScope());

    }

}

return resp;